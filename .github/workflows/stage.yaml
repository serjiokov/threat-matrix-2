name: Build & Deploy for Testing

on:
  push:
    branches:
      - master

  workflow_dispatch:
  
jobs:
  test-build:
    name: Build Hybrid
    runs-on: ubuntu-latest
    steps:

#     Checkout everything
      - name: Checkout threatrix master repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: Checkout repos core 
        id: core
        continue-on-error: true
        uses: actions/checkout@v2
        with:
          repository: threatrix/core
          token: '${{ secrets.TOKEN }}'
          path: core
          ref: ${{ github.head_ref }}
      - name: Checkout repos core main
        if: steps.core.outcome == 'failure' 
        uses: actions/checkout@v2
        with:
          repository: threatrix/core
          token: '${{ secrets.TOKEN }}'
          path: core
      - name: Checkout repos common 
        id: common
        continue-on-error: true
        uses: actions/checkout@v2
        with:
          repository: threatrix/common
          token: '${{ secrets.TOKEN }}'
          path: common
          ref: ${{ github.head_ref }}
      - name: Checkout repos common main
        if: steps.common.outcome == 'failure' 
        uses: actions/checkout@v2
        with:
          repository: threatrix/common
          token: '${{ secrets.TOKEN }}'
          path: common
      - name: Checkout repos ingest 
        id: ingest
        continue-on-error: true
        uses: actions/checkout@v2
        with:
          repository: threatrix/ingest
          token: '${{ secrets.TOKEN }}'
          path: ingest
          ref: ${{ github.head_ref }}
      - name: Checkout repos ingest main
        if: steps.ingest.outcome == 'failure' 
        uses: actions/checkout@v2
        with:
          repository: threatrix/ingest
          token: '${{ secrets.TOKEN }}'
          path: ingest
      - name: Checkout repos threat-agent
        id: threat-agent
        continue-on-error: true
        uses: actions/checkout@v2
        with:
          repository: threatrix/threat-agent
          token: '${{ secrets.TOKEN }}'
          path: threat-agent
          ref: ${{ github.head_ref }}
      - name: Checkout repos threat-agent main
        if: steps.threat-agent.outcome == 'failure' 
        uses: actions/checkout@v2
        with:
          repository: threatrix/threat-agent
          token: '${{ secrets.TOKEN }}'
          path: threat-agent
      - name: Checkout repos threat-center-core 
        id: threat-center-core
        continue-on-error: true
        uses: actions/checkout@v2
        with:
          repository: threatrix/threat-center-core
          token: '${{ secrets.TOKEN }}'
          path: threat-center-core
          ref: ${{ github.head_ref }}
      - name: Checkout repos threat-center-core main
        if: steps.threat-center-core.outcome == 'failure' 
        uses: actions/checkout@v2
        with:
          repository: threatrix/threat-center-core
          token: '${{ secrets.TOKEN }}'
          path: threat-center-core
      - name: Checkout repos threat-center-api 
        id: threat-center-api
        continue-on-error: true
        uses: actions/checkout@v2
        with:
          repository: threatrix/threat-center-api
          token: '${{ secrets.TOKEN }}'
          path: threat-center-api
          ref: ${{ github.head_ref }}
      - name: Checkout repos threat-center-api main
        if: steps.threat-center-api.outcome == 'failure' 
        uses: actions/checkout@v2
        with:
          repository: threatrix/threat-center-api
          token: '${{ secrets.TOKEN }}'
          path: threat-center-api
      - name: Checkout repos command-center-api 
        id: command-center-api
        continue-on-error: true
        uses: actions/checkout@v2
        with:
          repository: threatrix/command-center-api
          token: '${{ secrets.TOKEN }}'
          path: command-center-api
          ref: ${{ github.head_ref }}
      - name: Checkout repos command-center-api main
        if: steps.command-center-api.outcome == 'failure' 
        uses: actions/checkout@v2
        with:
          repository: threatrix/command-center-api
          token: '${{ secrets.TOKEN }}'
          path: command-center-api
          
# Update deployment version
      - name: Change release version
        run: |
          cd ./scripts
          ./changeversion.sh
          VER=$(cat ../common/src/main/resources/version)
          echo "VERSION=$VER" >> $GITHUB_ENV

# Check if version in file changed
      - name: Verison File Check
        run: |
          cd common/src/main/resources
          DIFF=$(git diff --name-only version)
          echo "CHANGED=$DIFF" >> $GITHUB_ENV

# Check version env variable
      - name: Check version variable
        run: |
          echo "VERSION =" ${{ env.VERSION }}
          echo "CHANGED = " ${{ env.CHANGED }}
          
# Push the changes to version back into the repository
      - name: Commit version
        if: ${{ env.CHANGED != '' }}
        run: |
          cd ./common
          git config --global user.name "Chetan Gopal"
          git config --global user.email "chetan.gopal@threatrix.io"
          git add src/main/resources/version
          git commit -m "Updated version for release"
          git push https://${{ secrets.TOKEN }}@github.com/threatrix/common.git

# Create release with latest version
#curl -X POST -H "Accept: application/vnd.github+json" -H "Authorization: Bearer '${{ secrets.TOKEN }}'" -H "X-GitHub-Api-Version: 2022-11-28"   https://api.github.com/repos/threatrix/threatrix-master/releases   -d '{"tag_name":"v1.0.0","target_commitish":"master","name":"v1.0.0","body":"Description of the release","draft":false,"prerelease":false,"generate_release_notes":false}'
    
# Install Java with SDKMAN
      - name: Install Java
        uses: renatoathaydes/setup-java-sdkman@v2.0
        with:
          java-version: '11.0.12-open' # The SDKMAN! JDK version to use.
          architecture: x64 # (x64 or x86) - defaults to x64

# Install custom version maven
      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.3
        with:
          maven-version: 3.8.4

# Enable cache 
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

# Build project
      - name: Build with Maven
        run: mvn clean install -DskipTests
        
# Checkout dockers
      - name: Checkout Docker build files
        uses: actions/checkout@v3
        with:
          repository: 'threatrix/dockers'
          token: '${{ secrets.TOKEN }}'
          path: dockers
          
# Build and push updated image to Dockerhub
      - name: Build Hybrid app docker image
        run: |
          cd ./dockers/hybrid/app
          sudo docker login -u ${{ secrets.DOCKER_LOGIN }} -p ${{ secrets.DOCKER_PWD }}
          ./build-image ${{ env.VERSION }}  ${{ github.workspace }} ${{ github.ref_name }}
          
      - name: Push Hybrid app docker image
        run: |
          sudo docker login -u ${{ secrets.DOCKER_LOGIN }} -p ${{ secrets.DOCKER_PWD }}
          sudo docker push -a threatrix/hybrid-app

# Build and push updated thret-agent image to Dockerhub
      - name: Build Hybrid Threat Agent docker image
        run: |
          cd ./dockers/threat-agent
          sudo docker login -u ${{ secrets.DOCKER_LOGIN }} -p ${{ secrets.DOCKER_PWD }}
          ./build-image ${{ env.VERSION }} ${{ github.workspace }} ${{ github.ref_name }}
          
      - name: Push Threat Agent docker image
        run: |
          sudo docker login -u ${{ secrets.DOCKER_LOGIN }} -p ${{ secrets.DOCKER_PWD }}
          sudo docker push -a threatrix/threat-agent
# Build and push updated thret-agent image to Dockerhub
      - name: Build Hybrid Threat Agent docker image
        run: |
          cd ./dockers/threat-agent
          sudo docker login -u ${{ secrets.DOCKER_LOGIN }} -p ${{ secrets.DOCKER_PWD }}
          ./build-image ${{ env.VERSION }} ${{ github.workspace }} ${{ github.ref_name }}
          
      - name: Push Threat Agent docker image
        run: |
          sudo docker login -u ${{ secrets.DOCKER_LOGIN }} -p ${{ secrets.DOCKER_PWD }}
          sudo docker push -a threatrix/threat-agent
# Build and push updated hybrid-db image to Dockerhub
      - name: Build Hybrid DB docker image
        run: |
          cd ./dockers/hybrid/hybrid-db
          sudo docker login -u ${{ secrets.DOCKER_LOGIN }} -p ${{ secrets.DOCKER_PWD }}
          ./build-image ${{ env.VERSION }} ${{ github.workspace }} ${{ github.ref_name }}
        
      - name: Push Threat Agent docker image
        run: |
          sudo docker login -u ${{ secrets.DOCKER_LOGIN }} -p ${{ secrets.DOCKER_PWD }}
          sudo docker push -a threatrix/hybrid-db

# Run deploy script on production
#      - name: 'Setup gcloud credentials'
#        uses: 'google-github-actions/auth@v1'
#        with:
#          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

#      - name: 'Set up Cloud SDK'
#       uses: 'google-github-actions/setup-gcloud@v1'

#      - name: 'Deploy container to production'
#        #run: 'gcloud info'
#        run: gcloud compute ssh --zone="us-central1-a" --project="stage-288403" app-1 -- 'cd /opt/threatrix/threat-center && ./deploy.sh'


      
# Send notification in Slack
      - name: Slack Notification
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: general
          SLACK_USERNAME: ${{ github.ref }}
          SLACK_REF: ""
          JOB_STATUS: ${{ job.status }}
        run: |
          if [ $JOB_STATUS = "failure" ]; then
            sl_color="danger";
            SLACK_MESSAGE="Version ${{ env.VERSION }} of branch ${{ github.ref }} for repository ${{ github.repository }} failed to build."
            SLACK_TITLE="Build failed"
          fi
          if [ $JOB_STATUS = "success" ]; then
            sl_color="good";
            SLACK_MESSAGE="Version ${{ env.VERSION }} of branch ${{ github.ref }} for repository ${{ github.repository }} successfully built."
            SLACK_TITLE="Build successful"
          fi
          string="{ \"channel\": \"$SLACK_CHANNEL\", \"attachments\": [ { \"mrkdwn_in\": [\"text\"], \"color\": \"$sl_color\", \"author_name\": \"$SLACK_USERNAME\", \"title\": \"$SLACK_TITLE\", \"fields\": [ { \"title\": \"$SLACK_REF\", \"value\": \"$SLACK_MESSAGE\", \"short\": false }, ] } ] }";
          curl -X POST --data-urlencode "payload=$string" $SLACK_WEBHOOK
